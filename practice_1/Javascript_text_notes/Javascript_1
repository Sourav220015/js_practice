JavaScript was invented by Brendan Eich in 1995.
It was developed for Netscape 2, and became the ECMA-262 standard in 1997.

After Netscape handed JavaScript over to ECMA, the Mozilla foundation continued to develop JavaScript for the Firefox browser.

Internet Explorer (IE4) was the first browser to support ECMA-262 Edition 1 (ES1).

1997 - ES-1
2009 - ES-5
2015 - ES-6
2023 - ES-14 (latest)

Initially named Mocha, then LiveScript, and finally JavaScript.

Initially it was made to run JavaScript on browser. Various Browser has various 
different different scripting engines to run JavaScript.

SpiderMonkey -> Firefox
V8 -> Chrome, Edge, Opera
JavaScriptCore -> Safari

Later in 2009 Ryan Dahl created a runtime for JavaScript using chromes V8 engine 
to run JavaScript outside browser known as Node.js

we can include js in html in two ways
1. Inernal js -> write js inside <script></script> tag. Multiple script tags are 
allowed in hte same html file.
2. External js file -> in the script tag there is an attribute called src, where
that js file can be linked.

--------------------------------------------------------------------------------------------------------------------------------------------------

               Variables
--------------           ----------------      ------------    -------------- --- -- -- -- - - - - -- - - --------      -         - ---

Variable declaration
----------------------------------------------------------------
we can declare a variable using three different keywords:
"var", "let", "const"

Scope
----------------------------------------------------------------
Scope determines the accessibility (visibility) of variables.
3 types of Scope 

-> Global Scope
A variable declared outside a function, becomes GLOBAL.
variable declares within a block with "var" keyword also global. 
It can be accesed and modified anywhere in the code 

-> Function Scope
A variable declared inside a function, regardless of var, "let" or "const", it is 
local to that function only. Outside of the function there is no existence of that variable. 
If you try to access those variables outside of the function it will throw error.

-> Block Scope
Before 2015 there was no concept of a block scope in javascript but then with ES-6 comes 
new two way to declare variables in javascript "let" and "const". 
those two are block scoped that means a variable declared with any of those two 
keywords in a block( which is nothing but a curly bracket{}) are local to the 
block only can not be access outside of the block. 

Hoisting
----------------------------------------------------------------
Hoisting is a mechanism where variables and function decalaration are
moved to the top of the scope before the code executes.

that's why below code won't give error but "undefined" will be printed on the console.

console.log(age) // undefined
var age = 24;

Temporal Dead Zone (TDZ)
----------------------------------------------------------------
A temporal dead zone (TDZ) is the area of a block where a variable is inaccessible 
until the moment the computer completely initializes it with a value.

Suppose you attempt to access a variable before its complete initialization. 
In such a case, JavaScript will throw a ReferenceError.

So, to prevent JavaScript from throwing such an error, you’ve got to remember 
to access your variables from outside the temporal dead zone.

But where exactly does the TDZ begin and end?

TDZ is different for var in compare to const and let

Example1:
{
  // bestFood’s TDZ starts here (at the beginning of this block’s local scope)
  // bestFood’s TDZ continues here
  // bestFood’s TDZ continues here
  // bestFood’s TDZ continues here
  console.log(bestFood); // returns ReferenceError because bestFood’s TDZ continues here
  // bestFood’s TDZ continues here
  // bestFood’s TDZ continues here
  let bestFood = "Vegetable Fried Rice"; // bestFood’s TDZ ends here
  // bestFood’s TDZ does not exist here
  // bestFood’s TDZ does not exist here
  // bestFood’s TDZ does not exist here
}

Example2:
{
  // TDZ starts here (at the beginning of this block’s local scope)
  // bestFood’s TDZ continues here
  // bestFood’s TDZ continues here
  // bestFood’s TDZ continues here
  // bestFood’s TDZ continues here
  // bestFood’s TDZ continues here
  // bestFood’s TDZ continues here
  let bestFood; // bestFood’s TDZ ends here
  console.log(bestFood); // returns undefined because bestFood’s TDZ does not exist here
  bestFood = "Vegetable Fried Rice"; // bestFood’s TDZ does not exist here
  console.log(bestFood); // returns "Vegetable Fried Rice" because bestFood’s TDZ does not exist here
}

JavaScript returned undefined because we did not assign bestFood a value 
before using (invoking) it. As such, JavaScript defaulted its value to undefined.

Var works differently --->

{
  // bestFood’s TDZ starts and ends here
  console.log(bestFood); // returns undefined because bestFood’s TDZ does not exist here
  var bestFood = "Vegetable Fried Rice"; // bestFood’s TDZ does not exist here
  console.log(bestFood); // returns "Vegetable Fried Rice" because bestFood’s TDZ does not exist here
  // bestFood’s TDZ does not exist here
  // bestFood’s TDZ does not exist here
}

The console.log statement successfully returned a value (undefined) because 
JavaScript automatically assigns undefined to a hoisted var variable.

In other words, when the computer hoists a var variable, it automatically 
initializes the variable with the value undefined.

In contrast, JavaScript does not initialize a let (or const) variable with 
any value whenever it hoists the variable. Instead, the variable remains dead and inaccessible.

Therefore, a let (or const) variable’s TDZ ends when JavaScript fully 
initializes it with the value specified during its declaration.

However, a var variable’s TDZ ends immediately after its hoisting—not when the variable gets fully 
initialized with the value specified during its declaration.

var Vs let Vs const
----------------------------------------------------------------
1. variable declared with with var is attached to the window object. But variable 
declared with let and const is not attached to the window object.

2. Scope of the var is Global and Function/local, Scope of let and const is Global, local and block.

3. Redeclaration and Reinitialization allowed in "var".
Redeclaration is not allowed for "let" but Reinitialization is allowed.
Redeclaration and Reinitialization is not allowed for "const".

4. In case of var Hoisting happens with a default value "undefined"
In case of let and const Hoisting happens without a default value.

-------------------------------------------------------------------##Datatypes##-------------------------------------------------------------------------

In JavaScript there are 2 types of datatypes

1. Primitive (only single value can be stored and of one single type)
There are of total 7 primitive datatypes are in js.

## number ##

It could be an integer value or it could be a floating value.
let n = 45;
let x = 34.67;

Besides regular numbers, there are so-called “special numeric values” which also 
belong to this data type: Infinity, -Infinity and NaN.

Infinity represents the mathematical Infinity ∞. It is a special value that’s 
greater than any number.

We can get it as a result of division by zero:

alert( 1 / 0 ); // Infinity

NaN represents a computational error. It is a result of an incorrect or an undefined 
mathematical operation

alert( "not a number" / 2 ); // NaN, such division is erroneous

NaN is sticky. Any further mathematical operation on NaN returns NaN:

alert( NaN + 1 ); // NaN
alert( 3 * NaN ); // NaN
alert( "not a number" / 2 - 1 ); // NaN

So, if there’s a NaN somewhere in a mathematical expression, it propagates to the whole result 
(there’s only one exception to that: NaN ** 0 is 1).

## BigInt ##

In JavaScript, the “number” type cannot safely represent integer values larger than 
(253-1) (that’s 9007199254740991), or less than -(253-1) for negatives.

For most purposes ±(253-1) range is quite enough, but sometimes we need the entire 
range of really big integers, e.g. for cryptography or microsecond-precision timestamps.

BigInt type was recently added to the language to represent integers of arbitrary length.

A BigInt value is created by appending n to the end of an integer:

// the "n" at the end means it's a BigInt
const bigInt = 1234567890123456789012345678901234567890n;

## String ##

A string in JavaScript must be surrounded by quotes.
In JavaScript, there are 3 types of quotes.

Double quotes: "Hello".
Single quotes: 'Hello'.
Backticks: `Hello`.

Double and single quotes are “simple” quotes. There’s practically 
no difference between them in JavaScript.

Backticks are “extended functionality” quotes. They allow us to embed 
variables and expressions into a string by wrapping them in ${…}

let name = "John";

// embed a variable
alert( `Hello, ${name}!` ); // Hello, John!

// embed an expression
alert( `the result is ${1 + 2}` ); // the result is 3

## Boolean ##

The boolean type has only two values: true and false.

let nameFieldChecked = true; // yes, name field is checked
let ageFieldChecked = false; // no, age field is not checked

## null ##

Intentional absense of data.

let age = null;

In JavaScript, null is not a “reference to a non-existing object” or 
a “null pointer” like in some other languages.

It’s just a special value which represents “nothing”, “empty” or “value unknown”.

The code above states that age is unknown.

## undefined ##

The meaning of undefined is “value is not assigned”.

If a variable is declared, but not assigned, then its value is undefined

let age;
alert(age); // shows "undefined"

Technically, it is possible to explicitly assign undefined to a variable:

age = undefined;
alert(age); // "undefined"

But it is not recommended.
Normally, one uses null to assign an “empty” or “unknown” value to a variable, 
while undefined is reserved as a default initial value for unassigned things.

## symbol ##

The symbol type is used to create unique identifiers for objects.
let id = Symbol("id")


## objects ##

The object type is special.

All other types are called “primitive” because their values can contain 
only a single thing (be it a string or a number or whatever). 
In contrast, objects are used to store collections of data and more complex entities.
let userInfo = {
    "name" : "Ramesh",
    "age" : 24,
    "getOccupation" : function(){
        console.log("Ramesh is an Software Developer");
    }
}

----------------------------------------------------------------
----------------------------------------------------------------


---> The typeof operator returns the type of the operand.

typeof undefined // "undefined"
typeof 0 // "number"
typeof 10n // "bigint"
typeof true // "boolean"
typeof "foo" // "string"
typeof Symbol("id") // "symbol"
typeof Math // "object"
typeof alert // "function"

typeof null // "object" --> why??? null is primitive datatype, 
so why then type is object and not null?
this is an error in the language, it’s not actually an object. and 
it is not being corrected because of compatibility issues.


----------------------------------------------------------------
Type Conversions

1. Implicit conversions

JS is a dynamic language means data types of the variables can change during the runtime;
Js determines data types depending on the value assigned.

let value = true; // boolean
value = 45; // now it is converted to a number
value = 45n // now it is converted to a bigInt
value = "sde" // now it is converted to a string

2. explicit conversions

There are also cases when we need to explicitly convert a value to the expected type.

## string conversion

let value = true; // boolean
value = String(value) // "true" -> now it is converted to a string

## numeric conversion

let value1 = "6" // string
value1 = Number(value1) // now it is converted to a number

undefined -> NaN
null -> 0
true and false -> 1 and 0
string	Whitespaces (includes spaces, tabs \t, newlines \n etc.) 
from the start and end are removed. 
If the remaining string is empty, the result is 0. 
Otherwise, the number is “read” from the string. An error gives NaN.

## boolean conversion

let value2 = "false" // string
value2 = Boolean(value2) // now it is converted to a boolean

Values that are intuitively “empty”, like 0, an empty string, null, undefined, and NaN, become false.
Other values become true.